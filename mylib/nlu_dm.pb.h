// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/nlu_dm.proto

#ifndef PROTOBUF_proto_2fnlu_5fdm_2eproto__INCLUDED
#define PROTOBUF_proto_2fnlu_5fdm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dialog {
namespace qp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto();
void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto();

class NluResult;
class Domain;
class Intent;
class Slot;

// ===================================================================

class NluResult : public ::google::protobuf::Message {
 public:
  NluResult();
  virtual ~NluResult();
  
  NluResult(const NluResult& from);
  
  inline NluResult& operator=(const NluResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NluResult& default_instance();
  
  void Swap(NluResult* other);
  
  // implements Message ----------------------------------------------
  
  NluResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NluResult& from);
  void MergeFrom(const NluResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  
  // optional string seg = 2;
  inline bool has_seg() const;
  inline void clear_seg();
  static const int kSegFieldNumber = 2;
  inline const ::std::string& seg() const;
  inline void set_seg(const ::std::string& value);
  inline void set_seg(const char* value);
  inline void set_seg(const char* value, size_t size);
  inline ::std::string* mutable_seg();
  inline ::std::string* release_seg();
  
  // repeated .dialog.qp.Domain domains = 3;
  inline int domains_size() const;
  inline void clear_domains();
  static const int kDomainsFieldNumber = 3;
  inline const ::dialog::qp::Domain& domains(int index) const;
  inline ::dialog::qp::Domain* mutable_domains(int index);
  inline ::dialog::qp::Domain* add_domains();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Domain >&
      domains() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Domain >*
      mutable_domains();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.NluResult)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_seg();
  inline void clear_has_seg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* query_;
  ::std::string* seg_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::Domain > domains_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto();
  
  void InitAsDefaultInstance();
  static NluResult* default_instance_;
};
// -------------------------------------------------------------------

class Domain : public ::google::protobuf::Message {
 public:
  Domain();
  virtual ~Domain();
  
  Domain(const Domain& from);
  
  inline Domain& operator=(const Domain& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Domain& default_instance();
  
  void Swap(Domain* other);
  
  // implements Message ----------------------------------------------
  
  Domain* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Domain& from);
  void MergeFrom(const Domain& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string domain_name = 1;
  inline bool has_domain_name() const;
  inline void clear_domain_name();
  static const int kDomainNameFieldNumber = 1;
  inline const ::std::string& domain_name() const;
  inline void set_domain_name(const ::std::string& value);
  inline void set_domain_name(const char* value);
  inline void set_domain_name(const char* value, size_t size);
  inline ::std::string* mutable_domain_name();
  inline ::std::string* release_domain_name();
  
  // optional float domain_score = 2;
  inline bool has_domain_score() const;
  inline void clear_domain_score();
  static const int kDomainScoreFieldNumber = 2;
  inline float domain_score() const;
  inline void set_domain_score(float value);
  
  // repeated .dialog.qp.Intent domain_intents = 3;
  inline int domain_intents_size() const;
  inline void clear_domain_intents();
  static const int kDomainIntentsFieldNumber = 3;
  inline const ::dialog::qp::Intent& domain_intents(int index) const;
  inline ::dialog::qp::Intent* mutable_domain_intents(int index);
  inline ::dialog::qp::Intent* add_domain_intents();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Intent >&
      domain_intents() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Intent >*
      mutable_domain_intents();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.Domain)
 private:
  inline void set_has_domain_name();
  inline void clear_has_domain_name();
  inline void set_has_domain_score();
  inline void clear_has_domain_score();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* domain_name_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::Intent > domain_intents_;
  float domain_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto();
  
  void InitAsDefaultInstance();
  static Domain* default_instance_;
};
// -------------------------------------------------------------------

class Intent : public ::google::protobuf::Message {
 public:
  Intent();
  virtual ~Intent();
  
  Intent(const Intent& from);
  
  inline Intent& operator=(const Intent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Intent& default_instance();
  
  void Swap(Intent* other);
  
  // implements Message ----------------------------------------------
  
  Intent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Intent& from);
  void MergeFrom(const Intent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string intent_name = 1;
  inline bool has_intent_name() const;
  inline void clear_intent_name();
  static const int kIntentNameFieldNumber = 1;
  inline const ::std::string& intent_name() const;
  inline void set_intent_name(const ::std::string& value);
  inline void set_intent_name(const char* value);
  inline void set_intent_name(const char* value, size_t size);
  inline ::std::string* mutable_intent_name();
  inline ::std::string* release_intent_name();
  
  // optional float intent_score = 2;
  inline bool has_intent_score() const;
  inline void clear_intent_score();
  static const int kIntentScoreFieldNumber = 2;
  inline float intent_score() const;
  inline void set_intent_score(float value);
  
  // required .dialog.qp.Slot intent_slots = 3;
  inline bool has_intent_slots() const;
  inline void clear_intent_slots();
  static const int kIntentSlotsFieldNumber = 3;
  inline const ::dialog::qp::Slot& intent_slots() const;
  inline ::dialog::qp::Slot* mutable_intent_slots();
  inline ::dialog::qp::Slot* release_intent_slots();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.Intent)
 private:
  inline void set_has_intent_name();
  inline void clear_has_intent_name();
  inline void set_has_intent_score();
  inline void clear_has_intent_score();
  inline void set_has_intent_slots();
  inline void clear_has_intent_slots();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* intent_name_;
  ::dialog::qp::Slot* intent_slots_;
  float intent_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto();
  
  void InitAsDefaultInstance();
  static Intent* default_instance_;
};
// -------------------------------------------------------------------

class Slot : public ::google::protobuf::Message {
 public:
  Slot();
  virtual ~Slot();
  
  Slot(const Slot& from);
  
  inline Slot& operator=(const Slot& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Slot& default_instance();
  
  void Swap(Slot* other);
  
  // implements Message ----------------------------------------------
  
  Slot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Slot& from);
  void MergeFrom(const Slot& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string slot_key = 1;
  inline int slot_key_size() const;
  inline void clear_slot_key();
  static const int kSlotKeyFieldNumber = 1;
  inline const ::std::string& slot_key(int index) const;
  inline ::std::string* mutable_slot_key(int index);
  inline void set_slot_key(int index, const ::std::string& value);
  inline void set_slot_key(int index, const char* value);
  inline void set_slot_key(int index, const char* value, size_t size);
  inline ::std::string* add_slot_key();
  inline void add_slot_key(const ::std::string& value);
  inline void add_slot_key(const char* value);
  inline void add_slot_key(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& slot_key() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_slot_key();
  
  // repeated string slot_value = 2;
  inline int slot_value_size() const;
  inline void clear_slot_value();
  static const int kSlotValueFieldNumber = 2;
  inline const ::std::string& slot_value(int index) const;
  inline ::std::string* mutable_slot_value(int index);
  inline void set_slot_value(int index, const ::std::string& value);
  inline void set_slot_value(int index, const char* value);
  inline void set_slot_value(int index, const char* value, size_t size);
  inline ::std::string* add_slot_value();
  inline void add_slot_value(const ::std::string& value);
  inline void add_slot_value(const char* value);
  inline void add_slot_value(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& slot_value() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_slot_value();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.Slot)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> slot_key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> slot_value_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto();
  friend void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto();
  
  void InitAsDefaultInstance();
  static Slot* default_instance_;
};
// ===================================================================


// ===================================================================

// NluResult

// required string query = 1;
inline bool NluResult::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NluResult::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NluResult::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NluResult::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& NluResult::query() const {
  return *query_;
}
inline void NluResult::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void NluResult::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void NluResult::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NluResult::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* NluResult::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seg = 2;
inline bool NluResult::has_seg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NluResult::set_has_seg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NluResult::clear_has_seg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NluResult::clear_seg() {
  if (seg_ != &::google::protobuf::internal::kEmptyString) {
    seg_->clear();
  }
  clear_has_seg();
}
inline const ::std::string& NluResult::seg() const {
  return *seg_;
}
inline void NluResult::set_seg(const ::std::string& value) {
  set_has_seg();
  if (seg_ == &::google::protobuf::internal::kEmptyString) {
    seg_ = new ::std::string;
  }
  seg_->assign(value);
}
inline void NluResult::set_seg(const char* value) {
  set_has_seg();
  if (seg_ == &::google::protobuf::internal::kEmptyString) {
    seg_ = new ::std::string;
  }
  seg_->assign(value);
}
inline void NluResult::set_seg(const char* value, size_t size) {
  set_has_seg();
  if (seg_ == &::google::protobuf::internal::kEmptyString) {
    seg_ = new ::std::string;
  }
  seg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NluResult::mutable_seg() {
  set_has_seg();
  if (seg_ == &::google::protobuf::internal::kEmptyString) {
    seg_ = new ::std::string;
  }
  return seg_;
}
inline ::std::string* NluResult::release_seg() {
  clear_has_seg();
  if (seg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seg_;
    seg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .dialog.qp.Domain domains = 3;
inline int NluResult::domains_size() const {
  return domains_.size();
}
inline void NluResult::clear_domains() {
  domains_.Clear();
}
inline const ::dialog::qp::Domain& NluResult::domains(int index) const {
  return domains_.Get(index);
}
inline ::dialog::qp::Domain* NluResult::mutable_domains(int index) {
  return domains_.Mutable(index);
}
inline ::dialog::qp::Domain* NluResult::add_domains() {
  return domains_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Domain >&
NluResult::domains() const {
  return domains_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Domain >*
NluResult::mutable_domains() {
  return &domains_;
}

// -------------------------------------------------------------------

// Domain

// required string domain_name = 1;
inline bool Domain::has_domain_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Domain::set_has_domain_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Domain::clear_has_domain_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Domain::clear_domain_name() {
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    domain_name_->clear();
  }
  clear_has_domain_name();
}
inline const ::std::string& Domain::domain_name() const {
  return *domain_name_;
}
inline void Domain::set_domain_name(const ::std::string& value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Domain::set_domain_name(const char* value) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(value);
}
inline void Domain::set_domain_name(const char* value, size_t size) {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  domain_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Domain::mutable_domain_name() {
  set_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    domain_name_ = new ::std::string;
  }
  return domain_name_;
}
inline ::std::string* Domain::release_domain_name() {
  clear_has_domain_name();
  if (domain_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_name_;
    domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float domain_score = 2;
inline bool Domain::has_domain_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Domain::set_has_domain_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Domain::clear_has_domain_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Domain::clear_domain_score() {
  domain_score_ = 0;
  clear_has_domain_score();
}
inline float Domain::domain_score() const {
  return domain_score_;
}
inline void Domain::set_domain_score(float value) {
  set_has_domain_score();
  domain_score_ = value;
}

// repeated .dialog.qp.Intent domain_intents = 3;
inline int Domain::domain_intents_size() const {
  return domain_intents_.size();
}
inline void Domain::clear_domain_intents() {
  domain_intents_.Clear();
}
inline const ::dialog::qp::Intent& Domain::domain_intents(int index) const {
  return domain_intents_.Get(index);
}
inline ::dialog::qp::Intent* Domain::mutable_domain_intents(int index) {
  return domain_intents_.Mutable(index);
}
inline ::dialog::qp::Intent* Domain::add_domain_intents() {
  return domain_intents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Intent >&
Domain::domain_intents() const {
  return domain_intents_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Intent >*
Domain::mutable_domain_intents() {
  return &domain_intents_;
}

// -------------------------------------------------------------------

// Intent

// required string intent_name = 1;
inline bool Intent::has_intent_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Intent::set_has_intent_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Intent::clear_has_intent_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Intent::clear_intent_name() {
  if (intent_name_ != &::google::protobuf::internal::kEmptyString) {
    intent_name_->clear();
  }
  clear_has_intent_name();
}
inline const ::std::string& Intent::intent_name() const {
  return *intent_name_;
}
inline void Intent::set_intent_name(const ::std::string& value) {
  set_has_intent_name();
  if (intent_name_ == &::google::protobuf::internal::kEmptyString) {
    intent_name_ = new ::std::string;
  }
  intent_name_->assign(value);
}
inline void Intent::set_intent_name(const char* value) {
  set_has_intent_name();
  if (intent_name_ == &::google::protobuf::internal::kEmptyString) {
    intent_name_ = new ::std::string;
  }
  intent_name_->assign(value);
}
inline void Intent::set_intent_name(const char* value, size_t size) {
  set_has_intent_name();
  if (intent_name_ == &::google::protobuf::internal::kEmptyString) {
    intent_name_ = new ::std::string;
  }
  intent_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Intent::mutable_intent_name() {
  set_has_intent_name();
  if (intent_name_ == &::google::protobuf::internal::kEmptyString) {
    intent_name_ = new ::std::string;
  }
  return intent_name_;
}
inline ::std::string* Intent::release_intent_name() {
  clear_has_intent_name();
  if (intent_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = intent_name_;
    intent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float intent_score = 2;
inline bool Intent::has_intent_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Intent::set_has_intent_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Intent::clear_has_intent_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Intent::clear_intent_score() {
  intent_score_ = 0;
  clear_has_intent_score();
}
inline float Intent::intent_score() const {
  return intent_score_;
}
inline void Intent::set_intent_score(float value) {
  set_has_intent_score();
  intent_score_ = value;
}

// required .dialog.qp.Slot intent_slots = 3;
inline bool Intent::has_intent_slots() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Intent::set_has_intent_slots() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Intent::clear_has_intent_slots() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Intent::clear_intent_slots() {
  if (intent_slots_ != NULL) intent_slots_->::dialog::qp::Slot::Clear();
  clear_has_intent_slots();
}
inline const ::dialog::qp::Slot& Intent::intent_slots() const {
  return intent_slots_ != NULL ? *intent_slots_ : *default_instance_->intent_slots_;
}
inline ::dialog::qp::Slot* Intent::mutable_intent_slots() {
  set_has_intent_slots();
  if (intent_slots_ == NULL) intent_slots_ = new ::dialog::qp::Slot;
  return intent_slots_;
}
inline ::dialog::qp::Slot* Intent::release_intent_slots() {
  clear_has_intent_slots();
  ::dialog::qp::Slot* temp = intent_slots_;
  intent_slots_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// Slot

// repeated string slot_key = 1;
inline int Slot::slot_key_size() const {
  return slot_key_.size();
}
inline void Slot::clear_slot_key() {
  slot_key_.Clear();
}
inline const ::std::string& Slot::slot_key(int index) const {
  return slot_key_.Get(index);
}
inline ::std::string* Slot::mutable_slot_key(int index) {
  return slot_key_.Mutable(index);
}
inline void Slot::set_slot_key(int index, const ::std::string& value) {
  slot_key_.Mutable(index)->assign(value);
}
inline void Slot::set_slot_key(int index, const char* value) {
  slot_key_.Mutable(index)->assign(value);
}
inline void Slot::set_slot_key(int index, const char* value, size_t size) {
  slot_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Slot::add_slot_key() {
  return slot_key_.Add();
}
inline void Slot::add_slot_key(const ::std::string& value) {
  slot_key_.Add()->assign(value);
}
inline void Slot::add_slot_key(const char* value) {
  slot_key_.Add()->assign(value);
}
inline void Slot::add_slot_key(const char* value, size_t size) {
  slot_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Slot::slot_key() const {
  return slot_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Slot::mutable_slot_key() {
  return &slot_key_;
}

// repeated string slot_value = 2;
inline int Slot::slot_value_size() const {
  return slot_value_.size();
}
inline void Slot::clear_slot_value() {
  slot_value_.Clear();
}
inline const ::std::string& Slot::slot_value(int index) const {
  return slot_value_.Get(index);
}
inline ::std::string* Slot::mutable_slot_value(int index) {
  return slot_value_.Mutable(index);
}
inline void Slot::set_slot_value(int index, const ::std::string& value) {
  slot_value_.Mutable(index)->assign(value);
}
inline void Slot::set_slot_value(int index, const char* value) {
  slot_value_.Mutable(index)->assign(value);
}
inline void Slot::set_slot_value(int index, const char* value, size_t size) {
  slot_value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Slot::add_slot_value() {
  return slot_value_.Add();
}
inline void Slot::add_slot_value(const ::std::string& value) {
  slot_value_.Add()->assign(value);
}
inline void Slot::add_slot_value(const char* value) {
  slot_value_.Add()->assign(value);
}
inline void Slot::add_slot_value(const char* value, size_t size) {
  slot_value_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Slot::slot_value() const {
  return slot_value_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Slot::mutable_slot_value() {
  return &slot_value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp
}  // namespace dialog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fnlu_5fdm_2eproto__INCLUDED
