// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/qp.proto

#ifndef PROTOBUF_proto_2fqp_2eproto__INCLUDED
#define PROTOBUF_proto_2fqp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace dialog {
namespace qp {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fqp_2eproto();
void protobuf_AssignDesc_proto_2fqp_2eproto();
void protobuf_ShutdownFile_proto_2fqp_2eproto();

class QpRequest;
class QpResult;
class Term;
class DomainQpResult;
class NeTerm;
class Session;

// ===================================================================

class QpRequest : public ::google::protobuf::Message {
 public:
  QpRequest();
  virtual ~QpRequest();
  
  QpRequest(const QpRequest& from);
  
  inline QpRequest& operator=(const QpRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QpRequest& default_instance();
  
  void Swap(QpRequest* other);
  
  // implements Message ----------------------------------------------
  
  QpRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpRequest& from);
  void MergeFrom(const QpRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const char* value, size_t size);
  inline ::std::string* mutable_query();
  inline ::std::string* release_query();
  
  // optional .dialog.qp.Session session = 2;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 2;
  inline const ::dialog::qp::Session& session() const;
  inline ::dialog::qp::Session* mutable_session();
  inline ::dialog::qp::Session* release_session();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.QpRequest)
 private:
  inline void set_has_query();
  inline void clear_has_query();
  inline void set_has_session();
  inline void clear_has_session();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* query_;
  ::dialog::qp::Session* session_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static QpRequest* default_instance_;
};
// -------------------------------------------------------------------

class QpResult : public ::google::protobuf::Message {
 public:
  QpResult();
  virtual ~QpResult();
  
  QpResult(const QpResult& from);
  
  inline QpResult& operator=(const QpResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QpResult& default_instance();
  
  void Swap(QpResult* other);
  
  // implements Message ----------------------------------------------
  
  QpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QpResult& from);
  void MergeFrom(const QpResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string raw_query = 1;
  inline bool has_raw_query() const;
  inline void clear_raw_query();
  static const int kRawQueryFieldNumber = 1;
  inline const ::std::string& raw_query() const;
  inline void set_raw_query(const ::std::string& value);
  inline void set_raw_query(const char* value);
  inline void set_raw_query(const char* value, size_t size);
  inline ::std::string* mutable_raw_query();
  inline ::std::string* release_raw_query();
  
  // optional string corrected_query = 2;
  inline bool has_corrected_query() const;
  inline void clear_corrected_query();
  static const int kCorrectedQueryFieldNumber = 2;
  inline const ::std::string& corrected_query() const;
  inline void set_corrected_query(const ::std::string& value);
  inline void set_corrected_query(const char* value);
  inline void set_corrected_query(const char* value, size_t size);
  inline ::std::string* mutable_corrected_query();
  inline ::std::string* release_corrected_query();
  
  // repeated .dialog.qp.Term terms = 3;
  inline int terms_size() const;
  inline void clear_terms();
  static const int kTermsFieldNumber = 3;
  inline const ::dialog::qp::Term& terms(int index) const;
  inline ::dialog::qp::Term* mutable_terms(int index);
  inline ::dialog::qp::Term* add_terms();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Term >&
      terms() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Term >*
      mutable_terms();
  
  // repeated .dialog.qp.NeTerm ne_terms = 4;
  inline int ne_terms_size() const;
  inline void clear_ne_terms();
  static const int kNeTermsFieldNumber = 4;
  inline const ::dialog::qp::NeTerm& ne_terms(int index) const;
  inline ::dialog::qp::NeTerm* mutable_ne_terms(int index);
  inline ::dialog::qp::NeTerm* add_ne_terms();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >&
      ne_terms() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >*
      mutable_ne_terms();
  
  // repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
  inline int domain_qp_results_size() const;
  inline void clear_domain_qp_results();
  static const int kDomainQpResultsFieldNumber = 5;
  inline const ::dialog::qp::DomainQpResult& domain_qp_results(int index) const;
  inline ::dialog::qp::DomainQpResult* mutable_domain_qp_results(int index);
  inline ::dialog::qp::DomainQpResult* add_domain_qp_results();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::DomainQpResult >&
      domain_qp_results() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::DomainQpResult >*
      mutable_domain_qp_results();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.QpResult)
 private:
  inline void set_has_raw_query();
  inline void clear_has_raw_query();
  inline void set_has_corrected_query();
  inline void clear_has_corrected_query();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* raw_query_;
  ::std::string* corrected_query_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::Term > terms_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm > ne_terms_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::DomainQpResult > domain_qp_results_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static QpResult* default_instance_;
};
// -------------------------------------------------------------------

class Term : public ::google::protobuf::Message {
 public:
  Term();
  virtual ~Term();
  
  Term(const Term& from);
  
  inline Term& operator=(const Term& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Term& default_instance();
  
  void Swap(Term* other);
  
  // implements Message ----------------------------------------------
  
  Term* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Term& from);
  void MergeFrom(const Term& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string text = 1;
  inline bool has_text() const;
  inline void clear_text();
  static const int kTextFieldNumber = 1;
  inline const ::std::string& text() const;
  inline void set_text(const ::std::string& value);
  inline void set_text(const char* value);
  inline void set_text(const char* value, size_t size);
  inline ::std::string* mutable_text();
  inline ::std::string* release_text();
  
  // required string pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::std::string& pos() const;
  inline void set_pos(const ::std::string& value);
  inline void set_pos(const char* value);
  inline void set_pos(const char* value, size_t size);
  inline ::std::string* mutable_pos();
  inline ::std::string* release_pos();
  
  // required uint32 begin = 3;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 3;
  inline ::google::protobuf::uint32 begin() const;
  inline void set_begin(::google::protobuf::uint32 value);
  
  // required uint32 end = 4;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 4;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);
  
  // optional float weight = 5;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 5;
  inline float weight() const;
  inline void set_weight(float value);
  
  // @@protoc_insertion_point(class_scope:dialog.qp.Term)
 private:
  inline void set_has_text();
  inline void clear_has_text();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* text_;
  ::std::string* pos_;
  ::google::protobuf::uint32 begin_;
  ::google::protobuf::uint32 end_;
  float weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static Term* default_instance_;
};
// -------------------------------------------------------------------

class DomainQpResult : public ::google::protobuf::Message {
 public:
  DomainQpResult();
  virtual ~DomainQpResult();
  
  DomainQpResult(const DomainQpResult& from);
  
  inline DomainQpResult& operator=(const DomainQpResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DomainQpResult& default_instance();
  
  void Swap(DomainQpResult* other);
  
  // implements Message ----------------------------------------------
  
  DomainQpResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DomainQpResult& from);
  void MergeFrom(const DomainQpResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string domain = 1;
  inline bool has_domain() const;
  inline void clear_domain();
  static const int kDomainFieldNumber = 1;
  inline const ::std::string& domain() const;
  inline void set_domain(const ::std::string& value);
  inline void set_domain(const char* value);
  inline void set_domain(const char* value, size_t size);
  inline ::std::string* mutable_domain();
  inline ::std::string* release_domain();
  
  // optional float domain_score = 2;
  inline bool has_domain_score() const;
  inline void clear_domain_score();
  static const int kDomainScoreFieldNumber = 2;
  inline float domain_score() const;
  inline void set_domain_score(float value);
  
  // repeated .dialog.qp.NeTerm ne_terms = 3;
  inline int ne_terms_size() const;
  inline void clear_ne_terms();
  static const int kNeTermsFieldNumber = 3;
  inline const ::dialog::qp::NeTerm& ne_terms(int index) const;
  inline ::dialog::qp::NeTerm* mutable_ne_terms(int index);
  inline ::dialog::qp::NeTerm* add_ne_terms();
  inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >&
      ne_terms() const;
  inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >*
      mutable_ne_terms();
  
  // required string ne_sentense = 4;
  inline bool has_ne_sentense() const;
  inline void clear_ne_sentense();
  static const int kNeSentenseFieldNumber = 4;
  inline const ::std::string& ne_sentense() const;
  inline void set_ne_sentense(const ::std::string& value);
  inline void set_ne_sentense(const char* value);
  inline void set_ne_sentense(const char* value, size_t size);
  inline ::std::string* mutable_ne_sentense();
  inline ::std::string* release_ne_sentense();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.DomainQpResult)
 private:
  inline void set_has_domain();
  inline void clear_has_domain();
  inline void set_has_domain_score();
  inline void clear_has_domain_score();
  inline void set_has_ne_sentense();
  inline void clear_has_ne_sentense();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* domain_;
  ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm > ne_terms_;
  ::std::string* ne_sentense_;
  float domain_score_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static DomainQpResult* default_instance_;
};
// -------------------------------------------------------------------

class NeTerm : public ::google::protobuf::Message {
 public:
  NeTerm();
  virtual ~NeTerm();
  
  NeTerm(const NeTerm& from);
  
  inline NeTerm& operator=(const NeTerm& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NeTerm& default_instance();
  
  void Swap(NeTerm* other);
  
  // implements Message ----------------------------------------------
  
  NeTerm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NeTerm& from);
  void MergeFrom(const NeTerm& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string ne_type = 1;
  inline bool has_ne_type() const;
  inline void clear_ne_type();
  static const int kNeTypeFieldNumber = 1;
  inline const ::std::string& ne_type() const;
  inline void set_ne_type(const ::std::string& value);
  inline void set_ne_type(const char* value);
  inline void set_ne_type(const char* value, size_t size);
  inline ::std::string* mutable_ne_type();
  inline ::std::string* release_ne_type();
  
  // required string ne_text = 2;
  inline bool has_ne_text() const;
  inline void clear_ne_text();
  static const int kNeTextFieldNumber = 2;
  inline const ::std::string& ne_text() const;
  inline void set_ne_text(const ::std::string& value);
  inline void set_ne_text(const char* value);
  inline void set_ne_text(const char* value, size_t size);
  inline ::std::string* mutable_ne_text();
  inline ::std::string* release_ne_text();
  
  // required uint32 begin = 3;
  inline bool has_begin() const;
  inline void clear_begin();
  static const int kBeginFieldNumber = 3;
  inline ::google::protobuf::uint32 begin() const;
  inline void set_begin(::google::protobuf::uint32 value);
  
  // required uint32 end = 4;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 4;
  inline ::google::protobuf::uint32 end() const;
  inline void set_end(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:dialog.qp.NeTerm)
 private:
  inline void set_has_ne_type();
  inline void clear_has_ne_type();
  inline void set_has_ne_text();
  inline void clear_has_ne_text();
  inline void set_has_begin();
  inline void clear_has_begin();
  inline void set_has_end();
  inline void clear_has_end();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ne_type_;
  ::std::string* ne_text_;
  ::google::protobuf::uint32 begin_;
  ::google::protobuf::uint32 end_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static NeTerm* default_instance_;
};
// -------------------------------------------------------------------

class Session : public ::google::protobuf::Message {
 public:
  Session();
  virtual ~Session();
  
  Session(const Session& from);
  
  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Session& default_instance();
  
  void Swap(Session* other);
  
  // implements Message ----------------------------------------------
  
  Session* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .dialog.qp.QpResult qp_result = 1;
  inline bool has_qp_result() const;
  inline void clear_qp_result();
  static const int kQpResultFieldNumber = 1;
  inline const ::dialog::qp::QpResult& qp_result() const;
  inline ::dialog::qp::QpResult* mutable_qp_result();
  inline ::dialog::qp::QpResult* release_qp_result();
  
  // @@protoc_insertion_point(class_scope:dialog.qp.Session)
 private:
  inline void set_has_qp_result();
  inline void clear_has_qp_result();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::dialog::qp::QpResult* qp_result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2fqp_2eproto();
  friend void protobuf_AssignDesc_proto_2fqp_2eproto();
  friend void protobuf_ShutdownFile_proto_2fqp_2eproto();
  
  void InitAsDefaultInstance();
  static Session* default_instance_;
};
// ===================================================================


// ===================================================================

// QpRequest

// required string query = 1;
inline bool QpRequest::has_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpRequest::set_has_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpRequest::clear_has_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpRequest::clear_query() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    query_->clear();
  }
  clear_has_query();
}
inline const ::std::string& QpRequest::query() const {
  return *query_;
}
inline void QpRequest::set_query(const ::std::string& value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void QpRequest::set_query(const char* value) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void QpRequest::set_query(const char* value, size_t size) {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QpRequest::mutable_query() {
  set_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    query_ = new ::std::string;
  }
  return query_;
}
inline ::std::string* QpRequest::release_query() {
  clear_has_query();
  if (query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = query_;
    query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .dialog.qp.Session session = 2;
inline bool QpRequest::has_session() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpRequest::set_has_session() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpRequest::clear_has_session() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpRequest::clear_session() {
  if (session_ != NULL) session_->::dialog::qp::Session::Clear();
  clear_has_session();
}
inline const ::dialog::qp::Session& QpRequest::session() const {
  return session_ != NULL ? *session_ : *default_instance_->session_;
}
inline ::dialog::qp::Session* QpRequest::mutable_session() {
  set_has_session();
  if (session_ == NULL) session_ = new ::dialog::qp::Session;
  return session_;
}
inline ::dialog::qp::Session* QpRequest::release_session() {
  clear_has_session();
  ::dialog::qp::Session* temp = session_;
  session_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// QpResult

// required string raw_query = 1;
inline bool QpResult::has_raw_query() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QpResult::set_has_raw_query() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QpResult::clear_has_raw_query() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QpResult::clear_raw_query() {
  if (raw_query_ != &::google::protobuf::internal::kEmptyString) {
    raw_query_->clear();
  }
  clear_has_raw_query();
}
inline const ::std::string& QpResult::raw_query() const {
  return *raw_query_;
}
inline void QpResult::set_raw_query(const ::std::string& value) {
  set_has_raw_query();
  if (raw_query_ == &::google::protobuf::internal::kEmptyString) {
    raw_query_ = new ::std::string;
  }
  raw_query_->assign(value);
}
inline void QpResult::set_raw_query(const char* value) {
  set_has_raw_query();
  if (raw_query_ == &::google::protobuf::internal::kEmptyString) {
    raw_query_ = new ::std::string;
  }
  raw_query_->assign(value);
}
inline void QpResult::set_raw_query(const char* value, size_t size) {
  set_has_raw_query();
  if (raw_query_ == &::google::protobuf::internal::kEmptyString) {
    raw_query_ = new ::std::string;
  }
  raw_query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QpResult::mutable_raw_query() {
  set_has_raw_query();
  if (raw_query_ == &::google::protobuf::internal::kEmptyString) {
    raw_query_ = new ::std::string;
  }
  return raw_query_;
}
inline ::std::string* QpResult::release_raw_query() {
  clear_has_raw_query();
  if (raw_query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = raw_query_;
    raw_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string corrected_query = 2;
inline bool QpResult::has_corrected_query() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QpResult::set_has_corrected_query() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QpResult::clear_has_corrected_query() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QpResult::clear_corrected_query() {
  if (corrected_query_ != &::google::protobuf::internal::kEmptyString) {
    corrected_query_->clear();
  }
  clear_has_corrected_query();
}
inline const ::std::string& QpResult::corrected_query() const {
  return *corrected_query_;
}
inline void QpResult::set_corrected_query(const ::std::string& value) {
  set_has_corrected_query();
  if (corrected_query_ == &::google::protobuf::internal::kEmptyString) {
    corrected_query_ = new ::std::string;
  }
  corrected_query_->assign(value);
}
inline void QpResult::set_corrected_query(const char* value) {
  set_has_corrected_query();
  if (corrected_query_ == &::google::protobuf::internal::kEmptyString) {
    corrected_query_ = new ::std::string;
  }
  corrected_query_->assign(value);
}
inline void QpResult::set_corrected_query(const char* value, size_t size) {
  set_has_corrected_query();
  if (corrected_query_ == &::google::protobuf::internal::kEmptyString) {
    corrected_query_ = new ::std::string;
  }
  corrected_query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* QpResult::mutable_corrected_query() {
  set_has_corrected_query();
  if (corrected_query_ == &::google::protobuf::internal::kEmptyString) {
    corrected_query_ = new ::std::string;
  }
  return corrected_query_;
}
inline ::std::string* QpResult::release_corrected_query() {
  clear_has_corrected_query();
  if (corrected_query_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = corrected_query_;
    corrected_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .dialog.qp.Term terms = 3;
inline int QpResult::terms_size() const {
  return terms_.size();
}
inline void QpResult::clear_terms() {
  terms_.Clear();
}
inline const ::dialog::qp::Term& QpResult::terms(int index) const {
  return terms_.Get(index);
}
inline ::dialog::qp::Term* QpResult::mutable_terms(int index) {
  return terms_.Mutable(index);
}
inline ::dialog::qp::Term* QpResult::add_terms() {
  return terms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::Term >&
QpResult::terms() const {
  return terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::Term >*
QpResult::mutable_terms() {
  return &terms_;
}

// repeated .dialog.qp.NeTerm ne_terms = 4;
inline int QpResult::ne_terms_size() const {
  return ne_terms_.size();
}
inline void QpResult::clear_ne_terms() {
  ne_terms_.Clear();
}
inline const ::dialog::qp::NeTerm& QpResult::ne_terms(int index) const {
  return ne_terms_.Get(index);
}
inline ::dialog::qp::NeTerm* QpResult::mutable_ne_terms(int index) {
  return ne_terms_.Mutable(index);
}
inline ::dialog::qp::NeTerm* QpResult::add_ne_terms() {
  return ne_terms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >&
QpResult::ne_terms() const {
  return ne_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >*
QpResult::mutable_ne_terms() {
  return &ne_terms_;
}

// repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
inline int QpResult::domain_qp_results_size() const {
  return domain_qp_results_.size();
}
inline void QpResult::clear_domain_qp_results() {
  domain_qp_results_.Clear();
}
inline const ::dialog::qp::DomainQpResult& QpResult::domain_qp_results(int index) const {
  return domain_qp_results_.Get(index);
}
inline ::dialog::qp::DomainQpResult* QpResult::mutable_domain_qp_results(int index) {
  return domain_qp_results_.Mutable(index);
}
inline ::dialog::qp::DomainQpResult* QpResult::add_domain_qp_results() {
  return domain_qp_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::DomainQpResult >&
QpResult::domain_qp_results() const {
  return domain_qp_results_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::DomainQpResult >*
QpResult::mutable_domain_qp_results() {
  return &domain_qp_results_;
}

// -------------------------------------------------------------------

// Term

// required string text = 1;
inline bool Term::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Term::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Term::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Term::clear_text() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    text_->clear();
  }
  clear_has_text();
}
inline const ::std::string& Term::text() const {
  return *text_;
}
inline void Term::set_text(const ::std::string& value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Term::set_text(const char* value) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(value);
}
inline void Term::set_text(const char* value, size_t size) {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Term::mutable_text() {
  set_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    text_ = new ::std::string;
  }
  return text_;
}
inline ::std::string* Term::release_text() {
  clear_has_text();
  if (text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = text_;
    text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string pos = 2;
inline bool Term::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Term::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Term::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Term::clear_pos() {
  if (pos_ != &::google::protobuf::internal::kEmptyString) {
    pos_->clear();
  }
  clear_has_pos();
}
inline const ::std::string& Term::pos() const {
  return *pos_;
}
inline void Term::set_pos(const ::std::string& value) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::kEmptyString) {
    pos_ = new ::std::string;
  }
  pos_->assign(value);
}
inline void Term::set_pos(const char* value) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::kEmptyString) {
    pos_ = new ::std::string;
  }
  pos_->assign(value);
}
inline void Term::set_pos(const char* value, size_t size) {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::kEmptyString) {
    pos_ = new ::std::string;
  }
  pos_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Term::mutable_pos() {
  set_has_pos();
  if (pos_ == &::google::protobuf::internal::kEmptyString) {
    pos_ = new ::std::string;
  }
  return pos_;
}
inline ::std::string* Term::release_pos() {
  clear_has_pos();
  if (pos_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pos_;
    pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 begin = 3;
inline bool Term::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Term::set_has_begin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Term::clear_has_begin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Term::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
inline ::google::protobuf::uint32 Term::begin() const {
  return begin_;
}
inline void Term::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
}

// required uint32 end = 4;
inline bool Term::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Term::set_has_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Term::clear_has_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Term::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 Term::end() const {
  return end_;
}
inline void Term::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// optional float weight = 5;
inline bool Term::has_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Term::set_has_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Term::clear_has_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Term::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float Term::weight() const {
  return weight_;
}
inline void Term::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// DomainQpResult

// required string domain = 1;
inline bool DomainQpResult::has_domain() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DomainQpResult::set_has_domain() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DomainQpResult::clear_has_domain() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DomainQpResult::clear_domain() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    domain_->clear();
  }
  clear_has_domain();
}
inline const ::std::string& DomainQpResult::domain() const {
  return *domain_;
}
inline void DomainQpResult::set_domain(const ::std::string& value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void DomainQpResult::set_domain(const char* value) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(value);
}
inline void DomainQpResult::set_domain(const char* value, size_t size) {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  domain_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DomainQpResult::mutable_domain() {
  set_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    domain_ = new ::std::string;
  }
  return domain_;
}
inline ::std::string* DomainQpResult::release_domain() {
  clear_has_domain();
  if (domain_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = domain_;
    domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float domain_score = 2;
inline bool DomainQpResult::has_domain_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DomainQpResult::set_has_domain_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DomainQpResult::clear_has_domain_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DomainQpResult::clear_domain_score() {
  domain_score_ = 0;
  clear_has_domain_score();
}
inline float DomainQpResult::domain_score() const {
  return domain_score_;
}
inline void DomainQpResult::set_domain_score(float value) {
  set_has_domain_score();
  domain_score_ = value;
}

// repeated .dialog.qp.NeTerm ne_terms = 3;
inline int DomainQpResult::ne_terms_size() const {
  return ne_terms_.size();
}
inline void DomainQpResult::clear_ne_terms() {
  ne_terms_.Clear();
}
inline const ::dialog::qp::NeTerm& DomainQpResult::ne_terms(int index) const {
  return ne_terms_.Get(index);
}
inline ::dialog::qp::NeTerm* DomainQpResult::mutable_ne_terms(int index) {
  return ne_terms_.Mutable(index);
}
inline ::dialog::qp::NeTerm* DomainQpResult::add_ne_terms() {
  return ne_terms_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >&
DomainQpResult::ne_terms() const {
  return ne_terms_;
}
inline ::google::protobuf::RepeatedPtrField< ::dialog::qp::NeTerm >*
DomainQpResult::mutable_ne_terms() {
  return &ne_terms_;
}

// required string ne_sentense = 4;
inline bool DomainQpResult::has_ne_sentense() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DomainQpResult::set_has_ne_sentense() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DomainQpResult::clear_has_ne_sentense() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DomainQpResult::clear_ne_sentense() {
  if (ne_sentense_ != &::google::protobuf::internal::kEmptyString) {
    ne_sentense_->clear();
  }
  clear_has_ne_sentense();
}
inline const ::std::string& DomainQpResult::ne_sentense() const {
  return *ne_sentense_;
}
inline void DomainQpResult::set_ne_sentense(const ::std::string& value) {
  set_has_ne_sentense();
  if (ne_sentense_ == &::google::protobuf::internal::kEmptyString) {
    ne_sentense_ = new ::std::string;
  }
  ne_sentense_->assign(value);
}
inline void DomainQpResult::set_ne_sentense(const char* value) {
  set_has_ne_sentense();
  if (ne_sentense_ == &::google::protobuf::internal::kEmptyString) {
    ne_sentense_ = new ::std::string;
  }
  ne_sentense_->assign(value);
}
inline void DomainQpResult::set_ne_sentense(const char* value, size_t size) {
  set_has_ne_sentense();
  if (ne_sentense_ == &::google::protobuf::internal::kEmptyString) {
    ne_sentense_ = new ::std::string;
  }
  ne_sentense_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DomainQpResult::mutable_ne_sentense() {
  set_has_ne_sentense();
  if (ne_sentense_ == &::google::protobuf::internal::kEmptyString) {
    ne_sentense_ = new ::std::string;
  }
  return ne_sentense_;
}
inline ::std::string* DomainQpResult::release_ne_sentense() {
  clear_has_ne_sentense();
  if (ne_sentense_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ne_sentense_;
    ne_sentense_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// NeTerm

// required string ne_type = 1;
inline bool NeTerm::has_ne_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NeTerm::set_has_ne_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NeTerm::clear_has_ne_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NeTerm::clear_ne_type() {
  if (ne_type_ != &::google::protobuf::internal::kEmptyString) {
    ne_type_->clear();
  }
  clear_has_ne_type();
}
inline const ::std::string& NeTerm::ne_type() const {
  return *ne_type_;
}
inline void NeTerm::set_ne_type(const ::std::string& value) {
  set_has_ne_type();
  if (ne_type_ == &::google::protobuf::internal::kEmptyString) {
    ne_type_ = new ::std::string;
  }
  ne_type_->assign(value);
}
inline void NeTerm::set_ne_type(const char* value) {
  set_has_ne_type();
  if (ne_type_ == &::google::protobuf::internal::kEmptyString) {
    ne_type_ = new ::std::string;
  }
  ne_type_->assign(value);
}
inline void NeTerm::set_ne_type(const char* value, size_t size) {
  set_has_ne_type();
  if (ne_type_ == &::google::protobuf::internal::kEmptyString) {
    ne_type_ = new ::std::string;
  }
  ne_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeTerm::mutable_ne_type() {
  set_has_ne_type();
  if (ne_type_ == &::google::protobuf::internal::kEmptyString) {
    ne_type_ = new ::std::string;
  }
  return ne_type_;
}
inline ::std::string* NeTerm::release_ne_type() {
  clear_has_ne_type();
  if (ne_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ne_type_;
    ne_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string ne_text = 2;
inline bool NeTerm::has_ne_text() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NeTerm::set_has_ne_text() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NeTerm::clear_has_ne_text() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NeTerm::clear_ne_text() {
  if (ne_text_ != &::google::protobuf::internal::kEmptyString) {
    ne_text_->clear();
  }
  clear_has_ne_text();
}
inline const ::std::string& NeTerm::ne_text() const {
  return *ne_text_;
}
inline void NeTerm::set_ne_text(const ::std::string& value) {
  set_has_ne_text();
  if (ne_text_ == &::google::protobuf::internal::kEmptyString) {
    ne_text_ = new ::std::string;
  }
  ne_text_->assign(value);
}
inline void NeTerm::set_ne_text(const char* value) {
  set_has_ne_text();
  if (ne_text_ == &::google::protobuf::internal::kEmptyString) {
    ne_text_ = new ::std::string;
  }
  ne_text_->assign(value);
}
inline void NeTerm::set_ne_text(const char* value, size_t size) {
  set_has_ne_text();
  if (ne_text_ == &::google::protobuf::internal::kEmptyString) {
    ne_text_ = new ::std::string;
  }
  ne_text_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NeTerm::mutable_ne_text() {
  set_has_ne_text();
  if (ne_text_ == &::google::protobuf::internal::kEmptyString) {
    ne_text_ = new ::std::string;
  }
  return ne_text_;
}
inline ::std::string* NeTerm::release_ne_text() {
  clear_has_ne_text();
  if (ne_text_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ne_text_;
    ne_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 begin = 3;
inline bool NeTerm::has_begin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NeTerm::set_has_begin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NeTerm::clear_has_begin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NeTerm::clear_begin() {
  begin_ = 0u;
  clear_has_begin();
}
inline ::google::protobuf::uint32 NeTerm::begin() const {
  return begin_;
}
inline void NeTerm::set_begin(::google::protobuf::uint32 value) {
  set_has_begin();
  begin_ = value;
}

// required uint32 end = 4;
inline bool NeTerm::has_end() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NeTerm::set_has_end() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NeTerm::clear_has_end() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NeTerm::clear_end() {
  end_ = 0u;
  clear_has_end();
}
inline ::google::protobuf::uint32 NeTerm::end() const {
  return end_;
}
inline void NeTerm::set_end(::google::protobuf::uint32 value) {
  set_has_end();
  end_ = value;
}

// -------------------------------------------------------------------

// Session

// optional .dialog.qp.QpResult qp_result = 1;
inline bool Session::has_qp_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Session::set_has_qp_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Session::clear_has_qp_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Session::clear_qp_result() {
  if (qp_result_ != NULL) qp_result_->::dialog::qp::QpResult::Clear();
  clear_has_qp_result();
}
inline const ::dialog::qp::QpResult& Session::qp_result() const {
  return qp_result_ != NULL ? *qp_result_ : *default_instance_->qp_result_;
}
inline ::dialog::qp::QpResult* Session::mutable_qp_result() {
  set_has_qp_result();
  if (qp_result_ == NULL) qp_result_ = new ::dialog::qp::QpResult;
  return qp_result_;
}
inline ::dialog::qp::QpResult* Session::release_qp_result() {
  clear_has_qp_result();
  ::dialog::qp::QpResult* temp = qp_result_;
  qp_result_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp
}  // namespace dialog

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fqp_2eproto__INCLUDED
