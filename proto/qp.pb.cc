// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/qp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dialog {
namespace qp {

namespace {

const ::google::protobuf::Descriptor* QpRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Term_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Term_reflection_ = NULL;
const ::google::protobuf::Descriptor* DomainQpResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DomainQpResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* NeTerm_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NeTerm_reflection_ = NULL;
const ::google::protobuf::Descriptor* Session_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Session_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fqp_2eproto() {
  protobuf_AddDesc_proto_2fqp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/qp.proto");
  GOOGLE_CHECK(file != NULL);
  QpRequest_descriptor_ = file->message_type(0);
  static const int QpRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpRequest, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpRequest, session_),
  };
  QpRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QpRequest_descriptor_,
      QpRequest::default_instance_,
      QpRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QpRequest));
  QpResult_descriptor_ = file->message_type(1);
  static const int QpResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, raw_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, corrected_query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, ne_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, domain_qp_results_),
  };
  QpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QpResult_descriptor_,
      QpResult::default_instance_,
      QpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QpResult));
  Term_descriptor_ = file->message_type(2);
  static const int Term_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, weight_),
  };
  Term_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Term_descriptor_,
      Term::default_instance_,
      Term_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Term, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Term));
  DomainQpResult_descriptor_ = file->message_type(3);
  static const int DomainQpResult_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, domain_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, ne_terms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, ne_sentense_),
  };
  DomainQpResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DomainQpResult_descriptor_,
      DomainQpResult::default_instance_,
      DomainQpResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DomainQpResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DomainQpResult));
  NeTerm_descriptor_ = file->message_type(4);
  static const int NeTerm_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, ne_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, ne_text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, end_),
  };
  NeTerm_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NeTerm_descriptor_,
      NeTerm::default_instance_,
      NeTerm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NeTerm, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NeTerm));
  Session_descriptor_ = file->message_type(5);
  static const int Session_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, qp_result_),
  };
  Session_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Session_descriptor_,
      Session::default_instance_,
      Session_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Session, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Session));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fqp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QpRequest_descriptor_, &QpRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QpResult_descriptor_, &QpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Term_descriptor_, &Term::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DomainQpResult_descriptor_, &DomainQpResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NeTerm_descriptor_, &NeTerm::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Session_descriptor_, &Session::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fqp_2eproto() {
  delete QpRequest::default_instance_;
  delete QpRequest_reflection_;
  delete QpResult::default_instance_;
  delete QpResult_reflection_;
  delete Term::default_instance_;
  delete Term_reflection_;
  delete DomainQpResult::default_instance_;
  delete DomainQpResult_reflection_;
  delete NeTerm::default_instance_;
  delete NeTerm_reflection_;
  delete Session::default_instance_;
  delete Session_reflection_;
}

void protobuf_AddDesc_proto_2fqp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016proto/qp.proto\022\tdialog.qp\"\?\n\tQpRequest"
    "\022\r\n\005query\030\001 \002(\t\022#\n\007session\030\002 \001(\0132\022.dialo"
    "g.qp.Session\"\261\001\n\010QpResult\022\021\n\traw_query\030\001"
    " \002(\t\022\027\n\017corrected_query\030\002 \001(\t\022\036\n\005terms\030\003"
    " \003(\0132\017.dialog.qp.Term\022#\n\010ne_terms\030\004 \003(\0132"
    "\021.dialog.qp.NeTerm\0224\n\021domain_qp_results\030"
    "\005 \003(\0132\031.dialog.qp.DomainQpResult\"M\n\004Term"
    "\022\014\n\004text\030\001 \002(\t\022\013\n\003pos\030\002 \002(\t\022\r\n\005begin\030\003 \002"
    "(\r\022\013\n\003end\030\004 \002(\r\022\016\n\006weight\030\005 \001(\002\"p\n\016Domai"
    "nQpResult\022\016\n\006domain\030\001 \002(\t\022\024\n\014domain_scor"
    "e\030\002 \001(\002\022#\n\010ne_terms\030\003 \003(\0132\021.dialog.qp.Ne"
    "Term\022\023\n\013ne_sentense\030\004 \002(\t\"F\n\006NeTerm\022\017\n\007n"
    "e_type\030\001 \002(\t\022\017\n\007ne_text\030\002 \002(\t\022\r\n\005begin\030\003"
    " \002(\r\022\013\n\003end\030\004 \002(\r\"1\n\007Session\022&\n\tqp_resul"
    "t\030\001 \001(\0132\023.dialog.qp.QpResult", 588);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/qp.proto", &protobuf_RegisterTypes);
  QpRequest::default_instance_ = new QpRequest();
  QpResult::default_instance_ = new QpResult();
  Term::default_instance_ = new Term();
  DomainQpResult::default_instance_ = new DomainQpResult();
  NeTerm::default_instance_ = new NeTerm();
  Session::default_instance_ = new Session();
  QpRequest::default_instance_->InitAsDefaultInstance();
  QpResult::default_instance_->InitAsDefaultInstance();
  Term::default_instance_->InitAsDefaultInstance();
  DomainQpResult::default_instance_->InitAsDefaultInstance();
  NeTerm::default_instance_->InitAsDefaultInstance();
  Session::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fqp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fqp_2eproto {
  StaticDescriptorInitializer_proto_2fqp_2eproto() {
    protobuf_AddDesc_proto_2fqp_2eproto();
  }
} static_descriptor_initializer_proto_2fqp_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int QpRequest::kQueryFieldNumber;
const int QpRequest::kSessionFieldNumber;
#endif  // !_MSC_VER

QpRequest::QpRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QpRequest::InitAsDefaultInstance() {
  session_ = const_cast< ::dialog::qp::Session*>(&::dialog::qp::Session::default_instance());
}

QpRequest::QpRequest(const QpRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QpRequest::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  session_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpRequest::~QpRequest() {
  SharedDtor();
}

void QpRequest::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (this != default_instance_) {
    delete session_;
  }
}

void QpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpRequest_descriptor_;
}

const QpRequest& QpRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

QpRequest* QpRequest::default_instance_ = NULL;

QpRequest* QpRequest::New() const {
  return new QpRequest;
}

void QpRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    if (has_session()) {
      if (session_ != NULL) session_->::dialog::qp::Session::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session;
        break;
      }
      
      // optional .dialog.qp.Session session = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }
  
  // optional .dialog.qp.Session session = 2;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->session(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QpRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }
  
  // optional .dialog.qp.Session session = 2;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->session(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QpRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // optional .dialog.qp.Session session = 2;
    if (has_session()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QpRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QpRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QpRequest::MergeFrom(const QpRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_session()) {
      mutable_session()->::dialog::qp::Session::MergeFrom(from.session());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QpRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpRequest::CopyFrom(const QpRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_session()) {
    if (!this->session().IsInitialized()) return false;
  }
  return true;
}

void QpRequest::Swap(QpRequest* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(session_, other->session_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QpRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpRequest_descriptor_;
  metadata.reflection = QpRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QpResult::kRawQueryFieldNumber;
const int QpResult::kCorrectedQueryFieldNumber;
const int QpResult::kTermsFieldNumber;
const int QpResult::kNeTermsFieldNumber;
const int QpResult::kDomainQpResultsFieldNumber;
#endif  // !_MSC_VER

QpResult::QpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QpResult::InitAsDefaultInstance() {
}

QpResult::QpResult(const QpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QpResult::SharedCtor() {
  _cached_size_ = 0;
  raw_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  corrected_query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QpResult::~QpResult() {
  SharedDtor();
}

void QpResult::SharedDtor() {
  if (raw_query_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_query_;
  }
  if (corrected_query_ != &::google::protobuf::internal::kEmptyString) {
    delete corrected_query_;
  }
  if (this != default_instance_) {
  }
}

void QpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QpResult_descriptor_;
}

const QpResult& QpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

QpResult* QpResult::default_instance_ = NULL;

QpResult* QpResult::New() const {
  return new QpResult;
}

void QpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_raw_query()) {
      if (raw_query_ != &::google::protobuf::internal::kEmptyString) {
        raw_query_->clear();
      }
    }
    if (has_corrected_query()) {
      if (corrected_query_ != &::google::protobuf::internal::kEmptyString) {
        corrected_query_->clear();
      }
    }
  }
  terms_.Clear();
  ne_terms_.Clear();
  domain_qp_results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string raw_query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_query().data(), this->raw_query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_corrected_query;
        break;
      }
      
      // optional string corrected_query = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_corrected_query:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_corrected_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->corrected_query().data(), this->corrected_query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_terms;
        break;
      }
      
      // repeated .dialog.qp.Term terms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_terms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_terms;
        if (input->ExpectTag(34)) goto parse_ne_terms;
        break;
      }
      
      // repeated .dialog.qp.NeTerm ne_terms = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ne_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ne_terms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ne_terms;
        if (input->ExpectTag(42)) goto parse_domain_qp_results;
        break;
      }
      
      // repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain_qp_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domain_qp_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_domain_qp_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string raw_query = 1;
  if (has_raw_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_query().data(), this->raw_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->raw_query(), output);
  }
  
  // optional string corrected_query = 2;
  if (has_corrected_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->corrected_query().data(), this->corrected_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->corrected_query(), output);
  }
  
  // repeated .dialog.qp.Term terms = 3;
  for (int i = 0; i < this->terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->terms(i), output);
  }
  
  // repeated .dialog.qp.NeTerm ne_terms = 4;
  for (int i = 0; i < this->ne_terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ne_terms(i), output);
  }
  
  // repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
  for (int i = 0; i < this->domain_qp_results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->domain_qp_results(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string raw_query = 1;
  if (has_raw_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_query().data(), this->raw_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->raw_query(), target);
  }
  
  // optional string corrected_query = 2;
  if (has_corrected_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->corrected_query().data(), this->corrected_query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->corrected_query(), target);
  }
  
  // repeated .dialog.qp.Term terms = 3;
  for (int i = 0; i < this->terms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->terms(i), target);
  }
  
  // repeated .dialog.qp.NeTerm ne_terms = 4;
  for (int i = 0; i < this->ne_terms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ne_terms(i), target);
  }
  
  // repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
  for (int i = 0; i < this->domain_qp_results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->domain_qp_results(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QpResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string raw_query = 1;
    if (has_raw_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_query());
    }
    
    // optional string corrected_query = 2;
    if (has_corrected_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->corrected_query());
    }
    
  }
  // repeated .dialog.qp.Term terms = 3;
  total_size += 1 * this->terms_size();
  for (int i = 0; i < this->terms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->terms(i));
  }
  
  // repeated .dialog.qp.NeTerm ne_terms = 4;
  total_size += 1 * this->ne_terms_size();
  for (int i = 0; i < this->ne_terms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ne_terms(i));
  }
  
  // repeated .dialog.qp.DomainQpResult domain_qp_results = 5;
  total_size += 1 * this->domain_qp_results_size();
  for (int i = 0; i < this->domain_qp_results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domain_qp_results(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QpResult::MergeFrom(const QpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  terms_.MergeFrom(from.terms_);
  ne_terms_.MergeFrom(from.ne_terms_);
  domain_qp_results_.MergeFrom(from.domain_qp_results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_query()) {
      set_raw_query(from.raw_query());
    }
    if (from.has_corrected_query()) {
      set_corrected_query(from.corrected_query());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QpResult::CopyFrom(const QpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < terms_size(); i++) {
    if (!this->terms(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ne_terms_size(); i++) {
    if (!this->ne_terms(i).IsInitialized()) return false;
  }
  for (int i = 0; i < domain_qp_results_size(); i++) {
    if (!this->domain_qp_results(i).IsInitialized()) return false;
  }
  return true;
}

void QpResult::Swap(QpResult* other) {
  if (other != this) {
    std::swap(raw_query_, other->raw_query_);
    std::swap(corrected_query_, other->corrected_query_);
    terms_.Swap(&other->terms_);
    ne_terms_.Swap(&other->ne_terms_);
    domain_qp_results_.Swap(&other->domain_qp_results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QpResult_descriptor_;
  metadata.reflection = QpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Term::kTextFieldNumber;
const int Term::kPosFieldNumber;
const int Term::kBeginFieldNumber;
const int Term::kEndFieldNumber;
const int Term::kWeightFieldNumber;
#endif  // !_MSC_VER

Term::Term()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Term::InitAsDefaultInstance() {
}

Term::Term(const Term& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Term::SharedCtor() {
  _cached_size_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_ = 0u;
  end_ = 0u;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Term::~Term() {
  SharedDtor();
}

void Term::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (pos_ != &::google::protobuf::internal::kEmptyString) {
    delete pos_;
  }
  if (this != default_instance_) {
  }
}

void Term::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Term::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Term_descriptor_;
}

const Term& Term::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

Term* Term::default_instance_ = NULL;

Term* Term::New() const {
  return new Term;
}

void Term::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != &::google::protobuf::internal::kEmptyString) {
        pos_->clear();
      }
    }
    begin_ = 0u;
    end_ = 0u;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Term::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string text = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }
      
      // required string pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pos().data(), this->pos().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin;
        break;
      }
      
      // required uint32 begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }
      
      // required uint32 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_weight;
        break;
      }
      
      // optional float weight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Term::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->text(), output);
  }
  
  // required string pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos().data(), this->pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pos(), output);
  }
  
  // required uint32 begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin(), output);
  }
  
  // required uint32 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end(), output);
  }
  
  // optional float weight = 5;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Term::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string text = 1;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }
  
  // required string pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos().data(), this->pos().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pos(), target);
  }
  
  // required uint32 begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin(), target);
  }
  
  // required uint32 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end(), target);
  }
  
  // optional float weight = 5;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Term::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string text = 1;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // required string pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pos());
    }
    
    // required uint32 begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }
    
    // required uint32 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
    // optional float weight = 5;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Term::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Term* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Term*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Term::MergeFrom(const Term& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Term::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Term::CopyFrom(const Term& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Term::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void Term::Swap(Term* other) {
  if (other != this) {
    std::swap(text_, other->text_);
    std::swap(pos_, other->pos_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Term::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Term_descriptor_;
  metadata.reflection = Term_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DomainQpResult::kDomainFieldNumber;
const int DomainQpResult::kDomainScoreFieldNumber;
const int DomainQpResult::kNeTermsFieldNumber;
const int DomainQpResult::kNeSentenseFieldNumber;
#endif  // !_MSC_VER

DomainQpResult::DomainQpResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DomainQpResult::InitAsDefaultInstance() {
}

DomainQpResult::DomainQpResult(const DomainQpResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DomainQpResult::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_score_ = 0;
  ne_sentense_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DomainQpResult::~DomainQpResult() {
  SharedDtor();
}

void DomainQpResult::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (ne_sentense_ != &::google::protobuf::internal::kEmptyString) {
    delete ne_sentense_;
  }
  if (this != default_instance_) {
  }
}

void DomainQpResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DomainQpResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DomainQpResult_descriptor_;
}

const DomainQpResult& DomainQpResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

DomainQpResult* DomainQpResult::default_instance_ = NULL;

DomainQpResult* DomainQpResult::New() const {
  return new DomainQpResult;
}

void DomainQpResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    domain_score_ = 0;
    if (has_ne_sentense()) {
      if (ne_sentense_ != &::google::protobuf::internal::kEmptyString) {
        ne_sentense_->clear();
      }
    }
  }
  ne_terms_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DomainQpResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_domain_score;
        break;
      }
      
      // optional float domain_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_domain_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &domain_score_)));
          set_has_domain_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ne_terms;
        break;
      }
      
      // repeated .dialog.qp.NeTerm ne_terms = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ne_terms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ne_terms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ne_terms;
        if (input->ExpectTag(34)) goto parse_ne_sentense;
        break;
      }
      
      // required string ne_sentense = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ne_sentense:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ne_sentense()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ne_sentense().data(), this->ne_sentense().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DomainQpResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }
  
  // optional float domain_score = 2;
  if (has_domain_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->domain_score(), output);
  }
  
  // repeated .dialog.qp.NeTerm ne_terms = 3;
  for (int i = 0; i < this->ne_terms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->ne_terms(i), output);
  }
  
  // required string ne_sentense = 4;
  if (has_ne_sentense()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_sentense().data(), this->ne_sentense().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ne_sentense(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DomainQpResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }
  
  // optional float domain_score = 2;
  if (has_domain_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->domain_score(), target);
  }
  
  // repeated .dialog.qp.NeTerm ne_terms = 3;
  for (int i = 0; i < this->ne_terms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->ne_terms(i), target);
  }
  
  // required string ne_sentense = 4;
  if (has_ne_sentense()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_sentense().data(), this->ne_sentense().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ne_sentense(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DomainQpResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }
    
    // optional float domain_score = 2;
    if (has_domain_score()) {
      total_size += 1 + 4;
    }
    
    // required string ne_sentense = 4;
    if (has_ne_sentense()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ne_sentense());
    }
    
  }
  // repeated .dialog.qp.NeTerm ne_terms = 3;
  total_size += 1 * this->ne_terms_size();
  for (int i = 0; i < this->ne_terms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ne_terms(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DomainQpResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DomainQpResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DomainQpResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DomainQpResult::MergeFrom(const DomainQpResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  ne_terms_.MergeFrom(from.ne_terms_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_domain_score()) {
      set_domain_score(from.domain_score());
    }
    if (from.has_ne_sentense()) {
      set_ne_sentense(from.ne_sentense());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DomainQpResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DomainQpResult::CopyFrom(const DomainQpResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DomainQpResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  for (int i = 0; i < ne_terms_size(); i++) {
    if (!this->ne_terms(i).IsInitialized()) return false;
  }
  return true;
}

void DomainQpResult::Swap(DomainQpResult* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(domain_score_, other->domain_score_);
    ne_terms_.Swap(&other->ne_terms_);
    std::swap(ne_sentense_, other->ne_sentense_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DomainQpResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DomainQpResult_descriptor_;
  metadata.reflection = DomainQpResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NeTerm::kNeTypeFieldNumber;
const int NeTerm::kNeTextFieldNumber;
const int NeTerm::kBeginFieldNumber;
const int NeTerm::kEndFieldNumber;
#endif  // !_MSC_VER

NeTerm::NeTerm()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NeTerm::InitAsDefaultInstance() {
}

NeTerm::NeTerm(const NeTerm& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NeTerm::SharedCtor() {
  _cached_size_ = 0;
  ne_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ne_text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begin_ = 0u;
  end_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NeTerm::~NeTerm() {
  SharedDtor();
}

void NeTerm::SharedDtor() {
  if (ne_type_ != &::google::protobuf::internal::kEmptyString) {
    delete ne_type_;
  }
  if (ne_text_ != &::google::protobuf::internal::kEmptyString) {
    delete ne_text_;
  }
  if (this != default_instance_) {
  }
}

void NeTerm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NeTerm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NeTerm_descriptor_;
}

const NeTerm& NeTerm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

NeTerm* NeTerm::default_instance_ = NULL;

NeTerm* NeTerm::New() const {
  return new NeTerm;
}

void NeTerm::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ne_type()) {
      if (ne_type_ != &::google::protobuf::internal::kEmptyString) {
        ne_type_->clear();
      }
    }
    if (has_ne_text()) {
      if (ne_text_ != &::google::protobuf::internal::kEmptyString) {
        ne_text_->clear();
      }
    }
    begin_ = 0u;
    end_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NeTerm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ne_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ne_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ne_type().data(), this->ne_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ne_text;
        break;
      }
      
      // required string ne_text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ne_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ne_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ne_text().data(), this->ne_text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begin;
        break;
      }
      
      // required uint32 begin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_end;
        break;
      }
      
      // required uint32 end = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NeTerm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ne_type = 1;
  if (has_ne_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_type().data(), this->ne_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ne_type(), output);
  }
  
  // required string ne_text = 2;
  if (has_ne_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_text().data(), this->ne_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ne_text(), output);
  }
  
  // required uint32 begin = 3;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->begin(), output);
  }
  
  // required uint32 end = 4;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->end(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NeTerm::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ne_type = 1;
  if (has_ne_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_type().data(), this->ne_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ne_type(), target);
  }
  
  // required string ne_text = 2;
  if (has_ne_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ne_text().data(), this->ne_text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ne_text(), target);
  }
  
  // required uint32 begin = 3;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->begin(), target);
  }
  
  // required uint32 end = 4;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->end(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NeTerm::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ne_type = 1;
    if (has_ne_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ne_type());
    }
    
    // required string ne_text = 2;
    if (has_ne_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ne_text());
    }
    
    // required uint32 begin = 3;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->begin());
    }
    
    // required uint32 end = 4;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NeTerm::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NeTerm* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NeTerm*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NeTerm::MergeFrom(const NeTerm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ne_type()) {
      set_ne_type(from.ne_type());
    }
    if (from.has_ne_text()) {
      set_ne_text(from.ne_text());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NeTerm::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NeTerm::CopyFrom(const NeTerm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeTerm::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void NeTerm::Swap(NeTerm* other) {
  if (other != this) {
    std::swap(ne_type_, other->ne_type_);
    std::swap(ne_text_, other->ne_text_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NeTerm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NeTerm_descriptor_;
  metadata.reflection = NeTerm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Session::kQpResultFieldNumber;
#endif  // !_MSC_VER

Session::Session()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Session::InitAsDefaultInstance() {
  qp_result_ = const_cast< ::dialog::qp::QpResult*>(&::dialog::qp::QpResult::default_instance());
}

Session::Session(const Session& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Session::SharedCtor() {
  _cached_size_ = 0;
  qp_result_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Session::~Session() {
  SharedDtor();
}

void Session::SharedDtor() {
  if (this != default_instance_) {
    delete qp_result_;
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Session_descriptor_;
}

const Session& Session::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fqp_2eproto();  return *default_instance_;
}

Session* Session::default_instance_ = NULL;

Session* Session::New() const {
  return new Session;
}

void Session::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qp_result()) {
      if (qp_result_ != NULL) qp_result_->::dialog::qp::QpResult::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .dialog.qp.QpResult qp_result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qp_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .dialog.qp.QpResult qp_result = 1;
  if (has_qp_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qp_result(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Session::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .dialog.qp.QpResult qp_result = 1;
  if (has_qp_result()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qp_result(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Session::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .dialog.qp.QpResult qp_result = 1;
    if (has_qp_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qp_result());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Session* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Session*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qp_result()) {
      mutable_qp_result()->::dialog::qp::QpResult::MergeFrom(from.qp_result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  
  if (has_qp_result()) {
    if (!this->qp_result().IsInitialized()) return false;
  }
  return true;
}

void Session::Swap(Session* other) {
  if (other != this) {
    std::swap(qp_result_, other->qp_result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Session_descriptor_;
  metadata.reflection = Session_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp
}  // namespace dialog

// @@protoc_insertion_point(global_scope)
