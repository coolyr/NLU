// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/nlu_dm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dialog {
namespace qp {

namespace {

const ::google::protobuf::Descriptor* NluResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NluResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* Domain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Domain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Intent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Intent_reflection_ = NULL;
const ::google::protobuf::Descriptor* Slot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Slot_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto() {
  protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/nlu_dm.proto");
  GOOGLE_CHECK(file != NULL);
  NluResult_descriptor_ = file->message_type(0);
  static const int NluResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluResult, query_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluResult, seg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluResult, domains_),
  };
  NluResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NluResult_descriptor_,
      NluResult::default_instance_,
      NluResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NluResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NluResult));
  Domain_descriptor_ = file->message_type(1);
  static const int Domain_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, domain_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, domain_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, domain_intents_),
  };
  Domain_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Domain_descriptor_,
      Domain::default_instance_,
      Domain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Domain, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Domain));
  Intent_descriptor_ = file->message_type(2);
  static const int Intent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, intent_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, intent_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, intent_slots_),
  };
  Intent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Intent_descriptor_,
      Intent::default_instance_,
      Intent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Intent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Intent));
  Slot_descriptor_ = file->message_type(3);
  static const int Slot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, slot_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, slot_value_),
  };
  Slot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Slot_descriptor_,
      Slot::default_instance_,
      Slot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Slot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Slot));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fnlu_5fdm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NluResult_descriptor_, &NluResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Domain_descriptor_, &Domain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Intent_descriptor_, &Intent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Slot_descriptor_, &Slot::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto() {
  delete NluResult::default_instance_;
  delete NluResult_reflection_;
  delete Domain::default_instance_;
  delete Domain_reflection_;
  delete Intent::default_instance_;
  delete Intent_reflection_;
  delete Slot::default_instance_;
  delete Slot_reflection_;
}

void protobuf_AddDesc_proto_2fnlu_5fdm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022proto/nlu_dm.proto\022\tdialog.qp\"K\n\tNluRe"
    "sult\022\r\n\005query\030\001 \002(\t\022\013\n\003seg\030\002 \001(\t\022\"\n\007doma"
    "ins\030\003 \003(\0132\021.dialog.qp.Domain\"^\n\006Domain\022\023"
    "\n\013domain_name\030\001 \002(\t\022\024\n\014domain_score\030\002 \001("
    "\002\022)\n\016domain_intents\030\003 \003(\0132\021.dialog.qp.In"
    "tent\"Z\n\006Intent\022\023\n\013intent_name\030\001 \002(\t\022\024\n\014i"
    "ntent_score\030\002 \001(\002\022%\n\014intent_slots\030\003 \002(\0132"
    "\017.dialog.qp.Slot\",\n\004Slot\022\020\n\010slot_key\030\001 \003"
    "(\t\022\022\n\nslot_value\030\002 \003(\t", 342);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/nlu_dm.proto", &protobuf_RegisterTypes);
  NluResult::default_instance_ = new NluResult();
  Domain::default_instance_ = new Domain();
  Intent::default_instance_ = new Intent();
  Slot::default_instance_ = new Slot();
  NluResult::default_instance_->InitAsDefaultInstance();
  Domain::default_instance_->InitAsDefaultInstance();
  Intent::default_instance_->InitAsDefaultInstance();
  Slot::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fnlu_5fdm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fnlu_5fdm_2eproto {
  StaticDescriptorInitializer_proto_2fnlu_5fdm_2eproto() {
    protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();
  }
} static_descriptor_initializer_proto_2fnlu_5fdm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int NluResult::kQueryFieldNumber;
const int NluResult::kSegFieldNumber;
const int NluResult::kDomainsFieldNumber;
#endif  // !_MSC_VER

NluResult::NluResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NluResult::InitAsDefaultInstance() {
}

NluResult::NluResult(const NluResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NluResult::SharedCtor() {
  _cached_size_ = 0;
  query_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NluResult::~NluResult() {
  SharedDtor();
}

void NluResult::SharedDtor() {
  if (query_ != &::google::protobuf::internal::kEmptyString) {
    delete query_;
  }
  if (seg_ != &::google::protobuf::internal::kEmptyString) {
    delete seg_;
  }
  if (this != default_instance_) {
  }
}

void NluResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NluResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NluResult_descriptor_;
}

const NluResult& NluResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();  return *default_instance_;
}

NluResult* NluResult::default_instance_ = NULL;

NluResult* NluResult::New() const {
  return new NluResult;
}

void NluResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_query()) {
      if (query_ != &::google::protobuf::internal::kEmptyString) {
        query_->clear();
      }
    }
    if (has_seg()) {
      if (seg_ != &::google::protobuf::internal::kEmptyString) {
        seg_->clear();
      }
    }
  }
  domains_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NluResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string query = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_query()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->query().data(), this->query().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seg;
        break;
      }
      
      // optional string seg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seg().data(), this->seg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domains;
        break;
      }
      
      // repeated .dialog.qp.Domain domains = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domains:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domains()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domains;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NluResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->query(), output);
  }
  
  // optional string seg = 2;
  if (has_seg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seg().data(), this->seg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seg(), output);
  }
  
  // repeated .dialog.qp.Domain domains = 3;
  for (int i = 0; i < this->domains_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->domains(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NluResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string query = 1;
  if (has_query()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->query().data(), this->query().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->query(), target);
  }
  
  // optional string seg = 2;
  if (has_seg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seg().data(), this->seg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seg(), target);
  }
  
  // repeated .dialog.qp.Domain domains = 3;
  for (int i = 0; i < this->domains_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->domains(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NluResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string query = 1;
    if (has_query()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->query());
    }
    
    // optional string seg = 2;
    if (has_seg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seg());
    }
    
  }
  // repeated .dialog.qp.Domain domains = 3;
  total_size += 1 * this->domains_size();
  for (int i = 0; i < this->domains_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domains(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NluResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NluResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NluResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NluResult::MergeFrom(const NluResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  domains_.MergeFrom(from.domains_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_query()) {
      set_query(from.query());
    }
    if (from.has_seg()) {
      set_seg(from.seg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NluResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NluResult::CopyFrom(const NluResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NluResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < domains_size(); i++) {
    if (!this->domains(i).IsInitialized()) return false;
  }
  return true;
}

void NluResult::Swap(NluResult* other) {
  if (other != this) {
    std::swap(query_, other->query_);
    std::swap(seg_, other->seg_);
    domains_.Swap(&other->domains_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NluResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NluResult_descriptor_;
  metadata.reflection = NluResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Domain::kDomainNameFieldNumber;
const int Domain::kDomainScoreFieldNumber;
const int Domain::kDomainIntentsFieldNumber;
#endif  // !_MSC_VER

Domain::Domain()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Domain::InitAsDefaultInstance() {
}

Domain::Domain(const Domain& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Domain::SharedCtor() {
  _cached_size_ = 0;
  domain_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  domain_score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Domain::~Domain() {
  SharedDtor();
}

void Domain::SharedDtor() {
  if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_name_;
  }
  if (this != default_instance_) {
  }
}

void Domain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Domain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Domain_descriptor_;
}

const Domain& Domain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();  return *default_instance_;
}

Domain* Domain::default_instance_ = NULL;

Domain* Domain::New() const {
  return new Domain;
}

void Domain::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain_name()) {
      if (domain_name_ != &::google::protobuf::internal::kEmptyString) {
        domain_name_->clear();
      }
    }
    domain_score_ = 0;
  }
  domain_intents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Domain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string domain_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain_name().data(), this->domain_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_domain_score;
        break;
      }
      
      // optional float domain_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_domain_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &domain_score_)));
          set_has_domain_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain_intents;
        break;
      }
      
      // repeated .dialog.qp.Intent domain_intents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain_intents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_domain_intents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_domain_intents;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Domain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string domain_name = 1;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain_name(), output);
  }
  
  // optional float domain_score = 2;
  if (has_domain_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->domain_score(), output);
  }
  
  // repeated .dialog.qp.Intent domain_intents = 3;
  for (int i = 0; i < this->domain_intents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->domain_intents(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Domain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string domain_name = 1;
  if (has_domain_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain_name().data(), this->domain_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain_name(), target);
  }
  
  // optional float domain_score = 2;
  if (has_domain_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->domain_score(), target);
  }
  
  // repeated .dialog.qp.Intent domain_intents = 3;
  for (int i = 0; i < this->domain_intents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->domain_intents(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Domain::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string domain_name = 1;
    if (has_domain_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain_name());
    }
    
    // optional float domain_score = 2;
    if (has_domain_score()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .dialog.qp.Intent domain_intents = 3;
  total_size += 1 * this->domain_intents_size();
  for (int i = 0; i < this->domain_intents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->domain_intents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Domain::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Domain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Domain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Domain::MergeFrom(const Domain& from) {
  GOOGLE_CHECK_NE(&from, this);
  domain_intents_.MergeFrom(from.domain_intents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain_name()) {
      set_domain_name(from.domain_name());
    }
    if (from.has_domain_score()) {
      set_domain_score(from.domain_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Domain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Domain::CopyFrom(const Domain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Domain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < domain_intents_size(); i++) {
    if (!this->domain_intents(i).IsInitialized()) return false;
  }
  return true;
}

void Domain::Swap(Domain* other) {
  if (other != this) {
    std::swap(domain_name_, other->domain_name_);
    std::swap(domain_score_, other->domain_score_);
    domain_intents_.Swap(&other->domain_intents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Domain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Domain_descriptor_;
  metadata.reflection = Domain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Intent::kIntentNameFieldNumber;
const int Intent::kIntentScoreFieldNumber;
const int Intent::kIntentSlotsFieldNumber;
#endif  // !_MSC_VER

Intent::Intent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Intent::InitAsDefaultInstance() {
  intent_slots_ = const_cast< ::dialog::qp::Slot*>(&::dialog::qp::Slot::default_instance());
}

Intent::Intent(const Intent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Intent::SharedCtor() {
  _cached_size_ = 0;
  intent_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  intent_score_ = 0;
  intent_slots_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Intent::~Intent() {
  SharedDtor();
}

void Intent::SharedDtor() {
  if (intent_name_ != &::google::protobuf::internal::kEmptyString) {
    delete intent_name_;
  }
  if (this != default_instance_) {
    delete intent_slots_;
  }
}

void Intent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Intent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Intent_descriptor_;
}

const Intent& Intent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();  return *default_instance_;
}

Intent* Intent::default_instance_ = NULL;

Intent* Intent::New() const {
  return new Intent;
}

void Intent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_intent_name()) {
      if (intent_name_ != &::google::protobuf::internal::kEmptyString) {
        intent_name_->clear();
      }
    }
    intent_score_ = 0;
    if (has_intent_slots()) {
      if (intent_slots_ != NULL) intent_slots_->::dialog::qp::Slot::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Intent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string intent_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_intent_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->intent_name().data(), this->intent_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_intent_score;
        break;
      }
      
      // optional float intent_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_intent_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intent_score_)));
          set_has_intent_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_intent_slots;
        break;
      }
      
      // required .dialog.qp.Slot intent_slots = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intent_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intent_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Intent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string intent_name = 1;
  if (has_intent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->intent_name().data(), this->intent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->intent_name(), output);
  }
  
  // optional float intent_score = 2;
  if (has_intent_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->intent_score(), output);
  }
  
  // required .dialog.qp.Slot intent_slots = 3;
  if (has_intent_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->intent_slots(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Intent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string intent_name = 1;
  if (has_intent_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->intent_name().data(), this->intent_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->intent_name(), target);
  }
  
  // optional float intent_score = 2;
  if (has_intent_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->intent_score(), target);
  }
  
  // required .dialog.qp.Slot intent_slots = 3;
  if (has_intent_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->intent_slots(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Intent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string intent_name = 1;
    if (has_intent_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->intent_name());
    }
    
    // optional float intent_score = 2;
    if (has_intent_score()) {
      total_size += 1 + 4;
    }
    
    // required .dialog.qp.Slot intent_slots = 3;
    if (has_intent_slots()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intent_slots());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Intent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Intent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Intent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Intent::MergeFrom(const Intent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_intent_name()) {
      set_intent_name(from.intent_name());
    }
    if (from.has_intent_score()) {
      set_intent_score(from.intent_score());
    }
    if (from.has_intent_slots()) {
      mutable_intent_slots()->::dialog::qp::Slot::MergeFrom(from.intent_slots());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Intent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Intent::CopyFrom(const Intent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Intent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void Intent::Swap(Intent* other) {
  if (other != this) {
    std::swap(intent_name_, other->intent_name_);
    std::swap(intent_score_, other->intent_score_);
    std::swap(intent_slots_, other->intent_slots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Intent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Intent_descriptor_;
  metadata.reflection = Intent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Slot::kSlotKeyFieldNumber;
const int Slot::kSlotValueFieldNumber;
#endif  // !_MSC_VER

Slot::Slot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Slot::InitAsDefaultInstance() {
}

Slot::Slot(const Slot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Slot::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Slot::~Slot() {
  SharedDtor();
}

void Slot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Slot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Slot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Slot_descriptor_;
}

const Slot& Slot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fnlu_5fdm_2eproto();  return *default_instance_;
}

Slot* Slot::default_instance_ = NULL;

Slot* Slot::New() const {
  return new Slot;
}

void Slot::Clear() {
  slot_key_.Clear();
  slot_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Slot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string slot_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_slot_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slot_key(0).data(), this->slot_key(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slot_key;
        if (input->ExpectTag(18)) goto parse_slot_value;
        break;
      }
      
      // repeated string slot_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_slot_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slot_value(0).data(), this->slot_value(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_slot_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Slot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string slot_key = 1;
  for (int i = 0; i < this->slot_key_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->slot_key(i).data(), this->slot_key(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->slot_key(i), output);
  }
  
  // repeated string slot_value = 2;
  for (int i = 0; i < this->slot_value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->slot_value(i).data(), this->slot_value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->slot_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Slot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string slot_key = 1;
  for (int i = 0; i < this->slot_key_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slot_key(i).data(), this->slot_key(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->slot_key(i), target);
  }
  
  // repeated string slot_value = 2;
  for (int i = 0; i < this->slot_value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slot_value(i).data(), this->slot_value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->slot_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Slot::ByteSize() const {
  int total_size = 0;
  
  // repeated string slot_key = 1;
  total_size += 1 * this->slot_key_size();
  for (int i = 0; i < this->slot_key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->slot_key(i));
  }
  
  // repeated string slot_value = 2;
  total_size += 1 * this->slot_value_size();
  for (int i = 0; i < this->slot_value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->slot_value(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Slot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Slot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Slot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Slot::MergeFrom(const Slot& from) {
  GOOGLE_CHECK_NE(&from, this);
  slot_key_.MergeFrom(from.slot_key_);
  slot_value_.MergeFrom(from.slot_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Slot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Slot::CopyFrom(const Slot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Slot::IsInitialized() const {
  
  return true;
}

void Slot::Swap(Slot* other) {
  if (other != this) {
    slot_key_.Swap(&other->slot_key_);
    slot_value_.Swap(&other->slot_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Slot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Slot_descriptor_;
  metadata.reflection = Slot_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace qp
}  // namespace dialog

// @@protoc_insertion_point(global_scope)
